name: Release

on:
  push:
    branches:
      - main

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - &checkout-job
        name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup .NET (for GitVersion)
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: '5.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0

      - name: Output version
        run: 'echo "GitVersion returned: ${{ steps.gitversion.outputs.semVer }}"'

  build:
    runs-on: ubuntu-latest
    needs: get-version
    outputs:
      dist-path: dist
    steps:
      - *checkout-job

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install poetry poetry-dynamic-versioning

      - name: Configure Poetry dynamic versioning
        run: |
          echo "Setting version to ${{ needs.get-version.outputs.version }}"
        env:
          POETRY_DYNAMIC_VERSIONING_BYPASS: ${{ needs.get-version.outputs.version }}

      - name: Install dependencies
        run: poetry install --no-root

      - name: Build package
        run: |
          export POETRY_DYNAMIC_VERSIONING_BYPASS=${{ needs.get-version.outputs.version }}
          poetry build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    runs-on: ubuntu-latest
    needs: [get-version, build]
    permissions:
      contents: write

    steps:
      - *checkout-job

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags
          git tag ${{ needs.get-version.outputs.version }}
          git push origin ${{ needs.get-version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          name: Release ${{ needs.get-version.outputs.version }}
          generate_release_notes: true
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
